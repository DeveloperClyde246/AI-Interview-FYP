//---------------------
//---------------------this is models/interview.js

const mongoose = require("mongoose");

const InterviewSchema = new mongoose.Schema({
  recruiterId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  title: { type: String, required: true },
  description: { type: String, required: true },
  scheduled_date: { type: Date, required: true },
  candidates: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
  questions: [
    {
      questionText: String,
      answerType: { type: String, enum: ["text", "file", "recording"], required: true },
    }
  ],
  responses: [
    {
      candidate: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
      answers: [String],
      videoMarks: [Number], // ✅ Store individual video marks
      marks: { type: Number, default: null } // ✅ Store average mark
    }
  ],
  createdAt: { type: Date, default: Date.now },
  answerDuration: { type: Number, default: 60 },
});

module.exports = mongoose.model("Interview", InterviewSchema);

//----------------------------------
//---------------------------------this is src/pages/candidate/CandidateInterviews.jsx

import React, { useState, useEffect } from "react";
import axios from "axios";
import { Link } from "react-router-dom";

const CandidateInterviews = () => {
  const [interviews, setInterviews] = useState([]);
  const [loading, setLoading] = useState(true);

  // ✅ Fetch assigned interviews on load
  useEffect(() => {
    const fetchInterviews = async () => {
      try {
        const res = await axios.get(
          "http://localhost:5000/candidate/interviews",
          { withCredentials: true }
        );
        setInterviews(res.data.interviews);
        setLoading(false);
      } catch (error) {
        console.error("❌ Error fetching interviews:", error.message);
        setLoading(false);
      }
    };

    fetchInterviews();
  }, []);

  if (loading) {
    return <p>Loading interviews...</p>;
  }

  return (
    <div className="container">
      <h2>My Interviews</h2>

      <table border="1" className="interview-table">
        <thead>
          <tr>
            <th>Title</th>
            <th>Recruiter</th>
            <th>Scheduled Date</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {interviews.length === 0 ? (
            <tr>
              <td colSpan="5">No assigned interviews</td>
            </tr>
          ) : (
            interviews.map((interview) => (
              <tr key={interview._id}>
                <td>{interview.title}</td>
                <td>
                  {interview.recruiterId.name} ({interview.recruiterId.email})
                </td>
                <td>{new Date(interview.scheduled_date).toLocaleString()}</td>
                <td>
                  {interview.alreadySubmitted ? (
                    <span style={{ color: "green", fontWeight: "bold" }}>
                      Submitted
                    </span>
                  ) : (
                    <span style={{ color: "orange" }}>Pending</span>
                  )}
                </td>
                <td>
                  {interview.alreadySubmitted ? (
                    <span style={{ color: "gray" }}>✔ Answered</span>
                  ) : (
                    <Link to={`/candidate/interview/${interview._id}`}>
                      Answer Questions
                    </Link>
                  )}
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      <Link to="/candidate" className="back-link">
        ← Back to Dashboard
      </Link>
    </div>
  );
};

export default CandidateInterviews;


//------------------------------------
//------------------------------------this is part of routes/candidate.js
//---------------answer pages------------------//
// ✅ Get Assigned Interviews
router.get("/interviews", async (req, res) => {
  try {
    const candidateId = new mongoose.Types.ObjectId(req.user.id);

    const interviews = await Interview.find({ candidates: candidateId })
      .populate("recruiterId", "name email")
      .sort({ scheduled_date: -1 });

    // ✅ Attach 'alreadySubmitted' flag for each interview
    const interviewsWithSubmissionStatus = interviews.map((interview) => {
      const alreadySubmitted = interview.responses.some(
        (response) => response.candidate.toString() === candidateId.toString()
      );

      return {
        ...interview.toObject(), // convert to plain object
        alreadySubmitted,
      };
    });

    res.json({ interviews: interviewsWithSubmissionStatus });
  } catch (error) {
    console.error("❌ Error fetching interviews:", error.message);
    res.status(500).json({ message: "Error fetching interviews" });
  }
});


// ✅ Get Interview Details and Questions
router.get("/interview/:id", async (req, res) => {
  try {
    const interview = await Interview.findById(req.params.id);
    if (!interview) return res.status(404).json({ message: "Interview not found" });
    // const alreadySubmitted = interview.responses.some(
    //   (res) => res.candidate.toString() === req.user.id
    // );

    res.json({ interview });
  } catch (error) {
    console.error("❌ Error fetching interview:", error.message);
    res.status(500).json({ message: "Error fetching interview" });
  }
});


// ✅ Submit Interview Answers
const storage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: "interview_responses",
    resource_type: "auto",
    format: async (req, file) => file.mimetype.split("/")[1],
  },
});

const upload = multer({
  storage,
  limits: { fileSize: 200 * 1024 * 1024 }, // Allow up to 200MB file uploads
});

router.post("/interview/:id/submit", upload.array("fileAnswers", 5), async (req, res) => {
  try {
    const candidateId = req.user.id;
    let processedAnswers = [];
    let videoURLs = [];

    // ✅ Check if the candidate has already submitted a response
    const interview = await Interview.findById(req.params.id);
    if (!interview) {
      return res.status(404).json({ message: "Interview not found" });
    }

    const existingResponse = interview.responses.find(
      (response) => response.candidate.toString() === candidateId
    );

    if (existingResponse) {
      return res.status(400).json({ message: "You have already submitted answers for this interview." });
    }

    // ✅ Process file uploads
    if (req.files && req.files.length > 0) {
      for (const file of req.files) {
        processedAnswers.push(file.path);
      }
    }

    if (req.body.answers) {
      for (const answer of req.body.answers) {
        processedAnswers.push(answer);
        if (answer.startsWith("http") && answer.includes("video/upload")) {
          videoURLs.push(answer);
        }
      }
    }

    // ✅ Save response with null marks initially
    const newResponse = {
      candidate: candidateId,
      answers: processedAnswers,
      videoMarks: [],
      marks: null,
    };

    interview.responses.push(newResponse);
    await interview.save();

    // ✅ Analyze video responses
    let videoMarks = [];

    for (const url of videoURLs) {
      try {
        const aiRes = await axios.post("http://localhost:5001/analyze-video", { videoURL: url });
        const { marks } = aiRes.data;
        videoMarks.push(marks);
      } catch (err) {
        console.error("❌ AI error:", err.message);
      }
    }

    // ✅ Calculate average mark
    const avgMark = videoMarks.length > 0 ? Math.round(videoMarks.reduce((a, b) => a + b, 0) / videoMarks.length) : null;

    // ✅ Update response with marks
    await Interview.findOneAndUpdate(
      { _id: req.params.id, "responses.candidate": candidateId },
      {
        $set: {
          "responses.$.videoMarks": videoMarks,
          "responses.$.marks": avgMark,
        },
      },
      { new: true }
    );

    res.json({ message: "Answers submitted successfully", avgMark });
  } catch (error) {
    console.error("❌ Error submitting answers:", error.message);
    res.status(500).json({ message: "Error submitting answers" });
  }
});




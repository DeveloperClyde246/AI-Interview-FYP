//---------------------
//---------------------this is models/Candidate.js
const mongoose = require("mongoose");

const CandidateSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User" }, // Ref to User schema
  interviews: [{ type: mongoose.Schema.Types.ObjectId, ref: "Interview" }], // Ref to Interview schema
  roleApplied: {
    type: String, // roles applied
    default: [],
  },

  skills: {
    type: [String], // Array of skills
    default: [],
  },

  introduction: {
    type: String, // A brief description by the candidate
    default: "",
  },

  education: [
    {
      degree: { type: String, required: true }, // Degree name
      institution: { type: String, required: true }, // Institution name
      yearOfCompletion: { type: Number, required: true }, // Year of completion
    },
  ],

  contactNumber: {
    type: String,
    validate: {
      validator: function (v) {
        // Basic regex to validate phone number format (e.g., +60123456789)
        return /^\+?[0-9]{10,15}$/.test(v);
      },
      message: (props) => `${props.value} is not a valid contact number!`,
    },
    required: [true, "Contact number is required"],
  },

});

module.exports = mongoose.model("Candidate", CandidateSchema);


//----------------------------
//----------------------------this is part of code of routes/candidate.js

//---------------profile pages------------------//
// ✅ Get Candidate Profile
router.get("/profile", async (req, res) => {
  try {
    const candidate = await User.findById(req.user.id);
    res.json({ candidate });
  } catch (error) {
    console.error("❌ Error loading profile:", error.message);
    res.status(500).json({ message: "Error loading profile" });
  }
});

// ✅ Update Profile
router.post("/profile/edit", async (req, res) => {
  const { name, email } = req.body;
  try {
    await User.findByIdAndUpdate(req.user.id, { name, email });
    res.status(200).json({ message: "Profile updated successfully" });
  } catch (error) {
    res.status(500).json({ message: "Error updating profile" });
  }
});


//-----------------------
//-----------------------this is pages/candidate/CandidateEditProfile.jsx
import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const CandidateProfile = () => {
  const [form, setForm] = useState({
    name: "",
    email: "",
    currentPassword: "",
    newPassword: "",
  });

  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const navigate = useNavigate();

  // ✅ Fetch current candidate profile data
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const res = await axios.get("http://localhost:5000/candidate/profile", {
          withCredentials: true,
        });
        if (res.data.candidate) {
          setForm({
            name: res.data.candidate.name,
            email: res.data.candidate.email,
            currentPassword: "",
            newPassword: "",
          });
        }
      } catch (err) {
        console.error("Error loading profile:", err);
        setError("Failed to load profile.");
      }
    };

    fetchProfile();
  }, []);

  // ✅ Handle input changes
  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // ✅ Handle profile update
  const handleProfileUpdate = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess("");

    try {
      const res = await axios.post(
        "http://localhost:5000/candidate/profile/edit",
        {
          name: form.name,
          email: form.email,
        },
        { withCredentials: true }
      );

      if (res.status === 200) {
        setSuccess("Profile updated successfully!");
      }
    } catch (err) {
      console.error("Error updating profile:", err);
      setError("Failed to update profile.");
    }
  };

  // ✅ Handle password change
  const handlePasswordChange = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess("");

    try {
      const res = await axios.post(
        "http://localhost:5000/candidate/profile/edit-password",
        {
          currentPassword: form.currentPassword,
          newPassword: form.newPassword,
        },
        { withCredentials: true }
      );

      if (res.status === 200) {
        setSuccess("Password updated successfully!");
        setForm({ ...form, currentPassword: "", newPassword: "" });
      }
    } catch (err) {
      console.error("Error changing password:", err);
      setError(
        err.response?.data?.message || "Failed to change password. Try again."
      );
    }
  };

  // ✅ Handle navigation back to candidate dashboard
  const handleBackToDashboard = () => {
    navigate("/candidate");
  };

  return (
    <div>
      <h2>Edit Profile</h2>
      {error && <p style={{ color: "red" }}>{error}</p>}
      {success && <p style={{ color: "green" }}>{success}</p>}

      {/* ✅ Profile Update Form */}
      <form onSubmit={handleProfileUpdate}>
        <label>Name:</label>
        <input
          type="text"
          name="name"
          value={form.name}
          onChange={handleChange}
          required
        />
        <br />

        <label>Email:</label>
        <input
          type="email"
          name="email"
          value={form.email}
          onChange={handleChange}
          required
        />
        <br />

        <button type="submit">Update Profile</button>
      </form>

      <h3>Change Password</h3>
      {/* ✅ Change Password Form */}
      <form onSubmit={handlePasswordChange}>
        <label>Current Password:</label>
        <input
          type="password"
          name="currentPassword"
          value={form.currentPassword}
          onChange={handleChange}
          required
        />
        <br />

        <label>New Password:</label>
        <input
          type="password"
          name="newPassword"
          value={form.newPassword}
          onChange={handleChange}
          required
        />
        <br />

        <button type="submit">Change Password</button>
      </form>

      <br />
      <button onClick={handleBackToDashboard}>Back to Dashboard</button>
    </div>
  );
};

export default CandidateProfile;



//---------------------
//---------------------this is pages/candidate/CandidateProfileDetails.jsx
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const CandidateProfileDetails = () => {
  const [candidate, setCandidate] = useState(null);
  const [error, setError] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const res = await axios.get("http://localhost:5000/candidate/profile", {
          withCredentials: true,
        });

        if (res.data.candidate) {
          setCandidate(res.data.candidate);
        }
      } catch (err) {
        console.error("Error fetching candidate profile:", err);
        setError("Failed to load profile.");
      }
    };

    fetchProfile();
  }, []);

  if (error) return <p style={{ color: "red" }}>{error}</p>;
  if (!candidate) return <p>Loading...</p>;

  return (
    <div>
      <h2>My Profile</h2>
      <p><strong>Name:</strong> {candidate.name}</p>
      <p><strong>Email:</strong> {candidate.email}</p>

      <button onClick={() => navigate("/candidate/profile/edit")}>
        Edit Profile
      </button>

      <br />
      <button onClick={() => navigate("/candidate")}>Back to Dashboard</button>
    </div>
  );
};

export default CandidateProfileDetails;

